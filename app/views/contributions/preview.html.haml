= render partial: 'display_breadcrumb', locals: {nav_links: {'contributions' => contrib_index_path, "#{@contribution.name}" => nil}}

- main_title = "Unknown"

- if @phrase == "0"
  - main_title = "Import from Zip"
- else
  - if @phrase == "1"
    - main_title = "Review Import"

-#    prepare for import preview brief
- preview_brief = "Choose your zip file to import."
- can_proceed_import = true
- failed_doc = []

- if @preview_result.is_a?(Array)

  - @preview_result.each do |f|
    - if !f[:message].nil? && f[:dest_file].nil?
      - failed_doc << { :document => f[:document], :message => f[:message] }

  - if @preview_result.size > 0
    - preview_brief = %(Found #{@preview_result.count} file(s) from the uploaded zip file.)
- else
  - can_proceed_import = false
  - preview_brief = "Can not proceed zip: " + @preview_result

- if failed_doc.size > 0
  - can_proceed_import = false


.container-fluid
  .row-fluid
    .page-header
      .row-fluid
        .span12
          .pull-left
            %h1= @contribution.name

  .row-fluid
    %h3= main_title

  .row-fluid
    To be associated with a data file, an annotation file must in some way to associate with existing item. (e.g. “4_68_4_10.wav” and “4_68_4_10.TextGrid”). You will get an error if finally one of the annotation files cannot be associated with one of the data files in the collection.

  = form_tag({controller: 'contributions', action: 'import'}, multipart: true, method: 'post', :id => 'import_contribution_form') do
    =hidden_field_tag 'sep', "#{@sep[:type]}"

    .row-fluid
      .page-header

    .row-fluid
      - if @phrase == "1"
        - text = "Re-upload Zip:"
      - else
        - text = "Upload Zip:"
      = label_tag :file_text, text
      = file_field_tag :file, :accept => "application/zip"
      = submit_tag 'hidden', :style => "display:none"

      %h3= "Tell me how to associate your file to collection item"

    .row-fluid
      Once you upload your files, we need to match them to the corresponding items in the existing collection.  The best way to do this is by finding the item name somewhere in your filename.  The options below provide different methods of achieving this.

    .row-fluid
      %ul.nav.nav-tabs#sep_nav
        %li#li_delimiter
          %a{"data-toggle" => "tab", :href => "#tab_delimiter"} Delimiter
        %li#li_offset
          %a{"data-toggle" => "tab", :href => "#tab_offset"} First N Characters
        %li#li_item
          %a{"data-toggle" => "tab", :href => "#tab_item"} Basename
        %li#li_doc
          %a{"data-toggle" => "tab", :href => "#tab_doc"} Document Match
      .tab-content{:style => "height: 100px"}
        #tab_delimiter.tab-pane.row-fluid
          .span6
            %label{:for => "opt_text_1"}
              Split the filename using a delimiter character and
              take one of the resulting parts.
            .form-group.form-inline
              %label.span6{:for => "label_1"}
                Delimiter character:
                = text_field_tag :delimiter, @sep[:delimiter].nil? ? "-" : @sep[:delimiter], maxlength: 1, size: 1
            .form-group.form-inline
              %label.span6{:for => "label_1"}
                Field Number:
                = text_field_tag :field, @sep[:field].nil? ? "1" : @sep[:field], maxlength: 1, size: 1
          .span6
            e.g., file name:
            = succeed "," do
              %span.badge 200-192_2_7_001-ch6-speaker16.txt
            %span.badge -
            to split file
            name into
            = succeed "," do
              %span.badge 200-192_2_7_001
            %span.badge ch6
            and
            = succeed "." do
              %span.badge speaker16
            %span.badge 1st
            field as item name.
        #tab_offset.row-fluid.tab-pane
          .span6
            %label{:for => "opt_text_3"}
              Use the first N characters of the file to find the item name
            .form-group.form-inline
              %label.span6{:for => "label_1"}
                First N characters:
                = text_field_tag :offset, @sep[:offset].nil? ? "" : @sep[:offset], maxlength: 2, size: 2, placeholder: "e.g., 5"
          .span6
            e.g., file name:
            %span.badge msc001channel3.trs
            , first
            %span.badge 6
            characters gives an item name of
            %span.badge msc001
        #tab_item.row-fluid.tab-pane
          .span6
            %label{:for => "opt_text_2"}
              The file base name (without file extension) is the same as the item name.
          .span6
            e.g., file name:
            %span.badge 4_10_001.trs
            and collection has item named
            %span.badge 4_10_001
            then this file would be associated with item
            %span.badge 4_10_001
        #tab_doc.row-fluid.tab-pane
          .span6
            %label{:for => "opt_text_2"}
              The file base name (without file extension) is the same as certain document name or document name is prefix of file base name. (Note that this method can be very slow for large collections since it has to compare each of your files to every file in the collection)
          .span6
            e.g., file name:
            %span.badge 2_192_2_7_001.out
            and collection has document named
            %span.badge 2_192_2_7_001.wav
            or
            %span.badge 2_192_2_7_001-speaker.wav
            then finally this file would be associated with the collection item that contains this document.

    .row-fluid
      %span.label.label-info Notice
      = preview_brief

      - if !can_proceed_import
        .row-fluid
          %span.label.label-important ATTENTION
          - failed_doc.each do |fd|
            %li= fd[:message]



    .form-actions
      - if @phrase == "1"
        = submit_tag 'Upload & Preview', :class => "btn btn-warning", :id => 'upload_btn', :name => "preview", :confirm => "You are going to upload a new zip file, so the previously uploaded file would be overwritten and CANNOT be recovered. Are you sure?"

        - if can_proceed_import
          = submit_tag 'Proceed Import', :class => "btn btn-danger", :id => 'import_btn'
        - else
          %button.btn.btn-success{:type => "button", :disabled => "disabled"} Proceed Import

      - else
        = submit_tag 'Upload & Preview', :class => "btn btn-primary", :id => 'upload_btn', :name => "preview"

      = link_to 'Cancel', contrib_show_path(@contribution.id), :class => "btn"

    .row-fluid
      %h3 Files To Import
      = render "display_contribution_preview"

= render 'shared/nectar_attribution'

:javascript
  $(document).ready(function () {
    $('#li_#{@sep[:type]}').addClass('active');
    $('#tab_#{@sep[:type]}').addClass('active');

    $('#sep_nav > li').on('click', function() {
      $('#sep').val($(this).attr('id').split('_')[1])
    });
  })

