#content
  #sortAndPerPage.clearfix
    .css-dropdown.pull-left
      %a.btn.dropdown-toggle{"data-toggle" => "dropdown", :href => "#"}
        Add selected to Collection list
        %span.caret
      %ul#create_list_drop_down.dropdown-menu
        -@collection_lists.each do |aCollectionList|
          %li
            %a{:href => "#add_to_existing_collection_list", :id=>"#{aCollectionList.id}"}
              =aCollectionList.flat_name
        %li.divider
        %li
          %a#create_collection_list.testclass{"data-toggle" => "modal", :href => "#new_collection_list", :role => "button"} Create New Collection List
    %label#showhide-assigned.btn.checkbox
      %input{type: "checkbox", id:"hide_show_checkbox", onClick: "hide_grouped_collections(this.checked);"} Hide grouped Collections

  #documents
    %table#collections.table.table-condensed
      %thead
        %tr
          %th.checkbox_header
            %label{:for => "allnonecheckbox"}
              %span.btn
                %input#allnonecheckbox{:onclick => "toggleCollection(this)", :type => "checkbox"}/
          %th.name Collection
          %th.collection Collection List
          %th.licence Licence
          %th.terms Licence Terms
      %tbody
        - @collections.each_with_index do |aCollection, index|
          %tr{class: (aCollection.collectionList.nil?)? "" : "groupedCollection" }
            %td.checkbox_field
              -if (aCollection.collectionList.nil?)
                %input.toggle_collection{:name => "#{aCollection.id}", :type => "checkbox", :id => "checkbox_collection_#{index}"}/
            %td.name
              = aCollection.flat_name
            %td.collection
              -if !(aCollection.collectionList.nil?)
                .label.licence
                  %span
                    =(aCollection.collectionList.nil?)? "" :aCollection.collectionList.flat_name
                  = link_to("" , {:controller=>"collection_lists", :action => "remove_collection", :collectionListId => aCollection.collectionList.id, :collectionId => aCollection.id},
                                  :class=>"remove", :onClick => "return (confirmRemoveCollection(#{aCollection.collectionList.collections.length}, '#{aCollection.collectionList.flat_name}', '#{aCollection.flat_short_name}', event));")
            %td.licence
              -if (aCollection.collectionList.nil?)
                .css-dropdown
                  %button.dropdown-toggle.btn.btn-mini{ "data-toggle" => "dropdown" }
                    - if aCollection.licence.present?
                      = aCollection.licence.flat_name
                    - else
                      Add Licence
                    %span.caret
                  %ul.dropdown-menu
                    - @licences.each do |lic|
                      %li
                        %a{:href => "#add_licence_to_collection", :onClick => "add_licence_to_collection('#{aCollection.id}', '#{lic.id}');"}= lic.flat_name
                    %li.divider
                    %li
                      = link_to("Create New", {:controller => "licences", :action => "new", :collection => aCollection.id}, :collection => aCollection.id, :onClick => "showProgressAnimation();")
              -else
                %span
                  =(aCollection.collectionList.licence.nil?)? "" :aCollection.collectionList.licence.flat_name
            %td.terms
              -if (aCollection.licence.present?)
                %a.btn.btn-mini{"data-toggle" => "modal", :href => "#licence_terms_collection#{index}", :role => "button"} View Licence Terms
                .modal.hide.fade.in{:id => "licence_terms_collection#{index}","aria-hidden" => "true", "aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
                  .modal-header
                    %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", :type => "button"} ×
                    %h3#myModalLabel= aCollection.licence.flat_name
                  #licence_terms_dialog.modal-body{:title => "Licence Terms"}
                    #licence_terms_content{:readonly => "true"}= aCollection.licence.flat_text.html_safe
                  .modal-footer
                    %a.btn.btn-primary{"aria-hidden" => "true()", "data-dismiss" => "modal"} Close



#new_collection_list.modal.hide.fade{ tabindex:"-1", role:"dialog", 'aria-labelledby'=>"myModalLabel", 'aria-hidden'=>"true"}
  = form_for(CollectionList.new) do |f|
    .modal-header
      %button.close{ type:"button", :"data-dismiss"=>"modal", "aria-hidden"=>"true"} ×
      %h3#myModalLabel Create New Collection list
    #new_collection_list_dialog.modal-body{ title:"New Collection List"}
      %p#collection_list_error.create_collection_list_error
      .control-group
        = f.label :name, {for:"name_for_add_collection_to_new_collection_list"}
        = f.text_field :name, {value:"", id: "name_for_add_collection_to_new_collection_list", class: "input-block-level"}
      .control-group
        .controls
          %label.checkbox
            = f.check_box :privacy_status, {:checked=>true}
            = f.label :privacy_status, "This collection list is private"
            = hidden_field_tag :collection_ids, nil, {id: "collection_ids_for_add_collection_to_new_collection_list"}
            = hidden_field_tag :add_all_collections, nil, {id: "add_all_collections_for_add_collection_to_new_collection_list"}
            = hidden_field_tag :hide, nil, {id: "hide_for_add_collection_to_new_collection_list"}


    .modal-footer
      %a.btn.pull-left{:"data-dismiss"=>"modal", :"aria-hidden"=>"true()"}
        Close
      = f.submit "Create Collections List", class: "btn btn-primary", id:"new_collection_list_submit"

= form_tag({:controller => "collection_lists", :action => "add_collections"}, :id => "add_collection_to_collection_list", :onSubmit => "showProgressAnimation();")  do
  = hidden_field_tag :id, nil, {id: "id_for_add_collection_to_collection_list"}
  = hidden_field_tag :collection_ids, nil, {id: "collection_ids_for_add_collection_to_collection_list"}
  = hidden_field_tag :add_all_collections, nil, {id: "add_all_collections_for_add_collection_to_collection_list"}
  = hidden_field_tag :hide, nil, {id: "hide_for_add_collection_to_collection_list"}

= form_tag({:controller => "collections", :action => "add_licence_to_collection"}, :id => "add_licence_to_collection_form", :onSubmit => "showProgressAnimation();") do
  = hidden_field_tag :collection_id, nil, {id: "collection_id_for_add_licence_to_collection"}
  = hidden_field_tag :licence_id, nil, {id: "licence_id_for_add_licence_to_collection"}
  = hidden_field_tag :hide, nil, {id: "hide_for_add_licence_to_collection"}

= render :partial=>"shared/modal_waiting_panel"

:javascript
  jQuery("#new_collection_list").submit( function() {
      jQuery("#new_collection_list_submit").attr('disabled','disabled');
      var new_name = jQuery("#name_for_add_collection_to_new_collection_list").val().trim()
      if(new_name == "") {
        jQuery("#collection_list_error").text("Name can't be blank");
        jQuery("#new_collection_list_submit").removeAttr('disabled');
        return false;
      }
      var error = false;
      jQuery('a[href$="add_to_existing_collection_list"]').each(function() {
        if(this.text.trim() == new_name) {
          jQuery("#collection_list_error").text("Collection list name already exists");
          error = true;
        }
      });
      if(error) {
        jQuery("#new_collection_list_submit").removeAttr('disabled');
        return false;
      }
      jQuery("#new_collection_list").hide();
      jQuery("#new_collection_list_submit").removeAttr('disabled');
      showProgressAnimation();
      });

  function generateCollectionsIds(field) {
    jQuery(field).val("");
    checks = document.getElementsByClassName('toggle_collection');
    for (var i=0, n=checks.length; i<n; i++) {
      if (checks[i].checked) {
        var existing = jQuery(field).val();
        if (existing == "") {
          jQuery(field).val(checks[i].name);
        }
        else {
          jQuery(field).val(existing + "," + checks[i].name);
        }
      }
    }
  };

  function insertParam(key,value) {
    key = escape(key);
    value = escape(value);
    var kvp = document.location.search.substr(1).split('&');

    var i=kvp.length;
    var x;
    while(i--) {
      x = kvp[i].split('=');
      if (x[0]==key) {
        x[1] = value;
        kvp[i] = x.join('=');
        break;
      }
    }

    if (i<0) {
      kvp[kvp.length] = [key,value].join('=');
    }

    //this will reload the page, it's likely better to store this until finished
    document.location.search = kvp.join('&');
  };


  function clearData() {
    jQuery("#collection_list_error").text("");
    jQuery("#collection_list_name").val("");
  };

  function hide_grouped_collections(hide) {
    if (hide == false) {
      jQuery(".groupedCollection").css( "display", "" );
    } else {
      jQuery(".groupedCollection").css( "display", "none" );
    }
  }

  function add_licence_to_collection(collection_id, licence_id) {
    showProgressAnimation();

    var isChecked = $('#hide_show_checkbox:checked').val()?true:false;

    $("#collection_id_for_add_licence_to_collection").val(collection_id);
    $("#licence_id_for_add_licence_to_collection").val(licence_id);
    $("#hide_for_add_licence_to_collection").val(isChecked)
    $("#add_licence_to_collection_form").submit();
  };

  /*
   *
   */
  function confirmRemoveCollection(collectionsInCollectionList, collectionListName, collectionName, event) {
    answer = true;
    if (collectionsInCollectionList > 1) {
      answer = confirm("Are you sure you want to remove the collection '" + collectionName + "' from '" + collectionListName + "'?");
    } else {
      answer = confirm("The collection list '" + collectionListName + "' has only 1 Collection, by removing '" + collectionName + "', you will be deleting the collection list.\n\nDo you want to proceed?");
    }

    if (answer) {
      showProgressAnimation();
    }

    return answer;
  }

  /*
   * This will fill the form for the action: "ADD SELECTED TO A NEW COLLECTION LIST"
   */
  jQuery("#create_collection_list").click( function() {
  	clearData();
    var isChecked = $('#hide_show_checkbox:checked').val()?true:false;

    generateCollectionsIds("#collection_ids_for_add_collection_to_new_collection_list");
    $("#add_all_collections_for_add_collection_to_new_collection_list").val("false");
    $("#hide_for_add_collection_to_new_collection_list").val(isChecked)

  });


  /*
   * This will fill the form for the action: "ADD ALL TO A NEW COLLECTION LIST"
   */
  jQuery("#create_all_collection_list").click( function() {
  	clearData();
    jQuery("#add_all_collections_for_add_collection_to_new_collection_list").val("true");
  });

  /*
   * This will fill the form for the action: "ADD SELECTED TO AN EXISTING COLLECTION LIST"
   */
  jQuery("A[href='#add_to_existing_collection_list']").click( function() {
    collectionListId=$(this).attr('id');
    var isChecked = $('#hide_show_checkbox:checked').val()?true:false;

    generateCollectionsIds("#collection_ids_for_add_collection_to_collection_list");
    $("#id_for_add_collection_to_collection_list").val(collectionListId);
    $("#add_all_collections_for_add_collection_to_collection_list").val("false");
    $("#hide_for_add_collection_to_collection_list").val(isChecked)

    jQuery("#add_collection_to_collection_list").submit();
  });

  /*
   * This will fill the form for the action: "ADD ALL TO AN EXISTING COLLECTION LIST"
   */
  jQuery("A[href='#add_all_to_existing_collection_list']").click( function() {
    collectionListId=$(this).attr('id');
    jQuery("#id_for_add_collection_to_collection_list").val(collectionListId);
    jQuery("#add_all_collections_for_add_collection_to_collection_list").val("true");
    jQuery("#add_collection_to_collection_list").submit();
  });

  //Set focus to the first element in the form of the modal panel
  jQuery('#new_collection_list').on('shown', function () {
    jQuery('input:text:visible:first', this).focus();
  })

-if (params[:hide].nil? or "f".eql?(params[:hide]))
  :javascript
    $('#hide_show_checkbox').prop('checked', false);
    hide_grouped_collections(false);
-else
  :javascript
    $('#hide_show_checkbox').prop('checked', true);
    hide_grouped_collections(true);
